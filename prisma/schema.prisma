generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @map("user_id")
  type                     String?
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  token_type               String?
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  scope                    String?
  id_token                 String?  @db.Text
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  nickname      String?
  emailVerified DateTime? @map("email_verified")

  accounts Account[]
  sessions Session[]
  Answer   Answer[]

  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Question {
  id          String   @id @default(cuid())
  description String
  date        String   @unique
  Answer      Answer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Answer {
  id          String @id @default(cuid())
  description String

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  year       String

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([questionId])
}
